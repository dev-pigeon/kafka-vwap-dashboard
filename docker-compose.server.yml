services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    platform: linux/amd64
    image: jackyoungdev/kafka-backend-api:0.1
    ports:
      - "5335:5335"
    env_file:
      - ./api/.env
    depends_on:
      - db
    networks:
      - kafka_dashboard

  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: kafka_dashboard
      POSTGRES_USER: kafka_user
      POSTGRES_PASSWORD: kafka_password
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./api/create_database.sql:/docker-entrypoint-initdb.d/create_database.sql
    networks:
      - kafka_dashboard

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    networks:
      - kafka_dashboard

  kafka-broker:
    image: wurstmeister/zookeeper:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CREATE_TOPICS: "stock-records:1:1"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    networks:
      - kafka_dashboard

  kafka-app:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    platform: linux/amd64
    image: jackyoungdev/backend-kafka:0.1
    depends_on:
      - kafka-broker
      - db
    networks:
      - kafka_dashboard

networks:
  kafka_dashboard:
    external: true
volumes:
  pgdata:
